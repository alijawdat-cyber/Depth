name: 📚 Deploy Documentation to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'documentation/**'
      - 'index.html'
      - '_sidebar.md'
      - '_navbar.md'
      - 'custom-theme.css'
      - 'docsify-config.js'
      - 'manifest.json'
      - 'README.md'
      - '.github/workflows/deploy-docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'documentation/**'
      - 'index.html'
      - '_sidebar.md'
      - '_navbar.md'
      - 'custom-theme.css'
      - 'docsify-config.js'
      - 'manifest.json'
      - 'README.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          npm install -g docsify-cli
          
      - name: 🛠️ Setup Pages
        uses: actions/configure-pages@v4
        
      - name: 🏗️ Build Documentation
        run: |
          echo "🚀 Building Depth Platform Documentation..."
          
          # Create build directory
          mkdir -p ./dist
          
          # Copy all necessary files
          cp index.html ./dist/
          cp -r documentation ./dist/
          cp _sidebar.md ./dist/
          cp _navbar.md ./dist/
          cp custom-theme.css ./dist/
          cp docsify-config.js ./dist/
          cp manifest.json ./dist/
          cp README.md ./dist/
          cp .nojekyll ./dist/
          
          # Copy assets if they exist
          if [ -d "depth-site/public" ]; then
            cp -r depth-site/public ./dist/
          fi
          
          # Optimize for production
          echo "📊 Optimization complete"
          echo "📁 Files in dist:"
          ls -la ./dist/
          
      - name: 📊 Generate Build Info
        run: |
          echo "📋 Build Information:" > ./dist/build-info.txt
          echo "Build Date: $(date)" >> ./dist/build-info.txt
          echo "Commit: $GITHUB_SHA" >> ./dist/build-info.txt
          echo "Branch: $GITHUB_REF_NAME" >> ./dist/build-info.txt
          echo "Workflow: $GITHUB_WORKFLOW" >> ./dist/build-info.txt
          
      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: ✅ Deployment Success
        run: |
          echo "🎉 Documentation deployed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📚 Documentation is now live at: ${{ steps.deployment.outputs.page_url }}"

  # Validation job (runs in parallel with build for PRs)
  validate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔍 Validate HTML
        run: |
          echo "🔍 Validating HTML files..."
          
          # Check if index.html exists and is valid
          if [ ! -f "index.html" ]; then
            echo "❌ index.html not found!"
            exit 1
          fi
          
          # Basic HTML validation
          if ! grep -q "<!DOCTYPE html>" index.html; then
            echo "❌ index.html missing DOCTYPE declaration!"
            exit 1
          fi
          
          if ! grep -q "Depth Platform" index.html; then
            echo "❌ index.html missing Depth Platform title!"
            exit 1
          fi
          
          echo "✅ HTML validation passed"
          
      - name: 🔍 Validate Markdown
        run: |
          echo "🔍 Validating Markdown files..."
          
          # Check critical markdown files
          critical_files=("_sidebar.md" "_navbar.md" "README.md")
          
          for file in "${critical_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ $file not found!"
              exit 1
            fi
            echo "✅ $file exists"
          done
          
          # Check documentation structure
          if [ ! -d "documentation" ]; then
            echo "❌ documentation directory not found!"
            exit 1
          fi
          
          echo "✅ Markdown validation passed"
          
      - name: 🔍 Validate Assets
        run: |
          echo "🔍 Validating CSS and JS files..."
          
          # Check CSS file
          if [ ! -f "custom-theme.css" ]; then
            echo "❌ custom-theme.css not found!"
            exit 1
          fi
          
          # Check JS file
          if [ ! -f "docsify-config.js" ]; then
            echo "❌ docsify-config.js not found!"
            exit 1
          fi
          
          # Check manifest
          if [ ! -f "manifest.json" ]; then
            echo "❌ manifest.json not found!"
            exit 1
          fi
          
          # Check .nojekyll
          if [ ! -f ".nojekyll" ]; then
            echo "❌ .nojekyll not found!"
            exit 1
          fi
          
          echo "✅ Assets validation passed"

  # Lighthouse audit job (optional, runs after deployment)
  audit:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 🏃 Wait for Deployment
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 60
          
      - name: 🔍 Lighthouse Audit
        run: |
          echo "🔍 Running Lighthouse audit..."
          npx lighthouse https://alijawdat-cyber.github.io/Depth/ \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --output=html \
            --output-path=./lighthouse-report.html \
            --preset=desktop
            
      - name: 📊 Upload Lighthouse Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.html
          retention-days: 7

  # Notification job
  notify:
    if: always()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📬 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment Successful!"
          echo "📚 Documentation is live at: https://alijawdat-cyber.github.io/Depth/"
          echo "⏰ Deployed at: $(date)"
          
      - name: ❌ Failure Notification
        if: needs.deploy.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Deployment Failed!"
          echo "🔍 Please check the logs for more details"
          echo "⏰ Failed at: $(date)"
