"use strict";(self.webpackChunkdepth_frontend=self.webpackChunkdepth_frontend||[]).push([[863],{"./node_modules/@mantine/core/esm/components/ScrollArea/ScrollArea.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>ScrollArea});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),floating_ui_react=__webpack_require__("./node_modules/@floating-ui/react/dist/floating-ui.react.mjs"),rem=__webpack_require__("./node_modules/@mantine/core/esm/core/utils/units-converters/rem.mjs"),create_vars_resolver=__webpack_require__("./node_modules/@mantine/core/esm/core/styles-api/create-vars-resolver/create-vars-resolver.mjs"),use_props=__webpack_require__("./node_modules/@mantine/core/esm/core/MantineProvider/use-props/use-props.mjs"),use_styles=__webpack_require__("./node_modules/@mantine/core/esm/core/styles-api/use-styles/use-styles.mjs"),Box=__webpack_require__("./node_modules/@mantine/core/esm/core/Box/Box.mjs"),factory=__webpack_require__("./node_modules/@mantine/core/esm/core/factory/factory.mjs"),create_safe_context=__webpack_require__("./node_modules/@mantine/core/esm/core/utils/create-safe-context/create-safe-context.mjs");const[ScrollAreaProvider,useScrollAreaContext]=(0,create_safe_context.F)("ScrollArea.Root component was not found in tree");function useCallbackRef(callback){const callbackRef=(0,react.useRef)(callback);return(0,react.useEffect)(()=>{callbackRef.current=callback}),(0,react.useMemo)(()=>(...args)=>callbackRef.current?.(...args),[])}var use_isomorphic_effect=__webpack_require__("./node_modules/@mantine/hooks/esm/use-isomorphic-effect/use-isomorphic-effect.mjs");function useResizeObserver(element,onResize){const handleResize=useCallbackRef(onResize);(0,use_isomorphic_effect.o)(()=>{let rAF=0;if(element){const resizeObserver=new ResizeObserver(()=>{cancelAnimationFrame(rAF),rAF=window.requestAnimationFrame(handleResize)});return resizeObserver.observe(element),()=>{window.cancelAnimationFrame(rAF),resizeObserver.unobserve(element)}}},[element,handleResize])}const Corner=(0,react.forwardRef)((props,ref)=>{const{style,...others}=props,ctx=useScrollAreaContext(),[width,setWidth]=(0,react.useState)(0),[height,setHeight]=(0,react.useState)(0),hasSize=Boolean(width&&height);return useResizeObserver(ctx.scrollbarX,()=>{const h=ctx.scrollbarX?.offsetHeight||0;ctx.onCornerHeightChange(h),setHeight(h)}),useResizeObserver(ctx.scrollbarY,()=>{const w=ctx.scrollbarY?.offsetWidth||0;ctx.onCornerWidthChange(w),setWidth(w)}),hasSize?(0,jsx_runtime.jsx)("div",{...others,ref,style:{...style,width,height}}):null}),ScrollAreaCorner=(0,react.forwardRef)((props,ref)=>{const ctx=useScrollAreaContext(),hasBothScrollbarsVisible=Boolean(ctx.scrollbarX&&ctx.scrollbarY);return"scroll"!==ctx.type&&hasBothScrollbarsVisible?(0,jsx_runtime.jsx)(Corner,{...props,ref}):null});var use_merged_ref=__webpack_require__("./node_modules/@mantine/hooks/esm/use-merged-ref/use-merged-ref.mjs");const defaultProps={scrollHideDelay:1e3,type:"hover"},ScrollAreaRoot=(0,react.forwardRef)((_props,ref)=>{const{type,scrollHideDelay,scrollbars,getStyles,...others}=(0,use_props.Y)("ScrollAreaRoot",defaultProps,_props),[scrollArea,setScrollArea]=(0,react.useState)(null),[viewport,setViewport]=(0,react.useState)(null),[content,setContent]=(0,react.useState)(null),[scrollbarX,setScrollbarX]=(0,react.useState)(null),[scrollbarY,setScrollbarY]=(0,react.useState)(null),[cornerWidth,setCornerWidth]=(0,react.useState)(0),[cornerHeight,setCornerHeight]=(0,react.useState)(0),[scrollbarXEnabled,setScrollbarXEnabled]=(0,react.useState)(!1),[scrollbarYEnabled,setScrollbarYEnabled]=(0,react.useState)(!1),rootRef=(0,use_merged_ref.pc)(ref,node=>setScrollArea(node));return(0,jsx_runtime.jsx)(ScrollAreaProvider,{value:{type,scrollHideDelay,scrollArea,viewport,onViewportChange:setViewport,content,onContentChange:setContent,scrollbarX,onScrollbarXChange:setScrollbarX,scrollbarXEnabled,onScrollbarXEnabledChange:setScrollbarXEnabled,scrollbarY,onScrollbarYChange:setScrollbarY,scrollbarYEnabled,onScrollbarYEnabledChange:setScrollbarYEnabled,onCornerWidthChange:setCornerWidth,onCornerHeightChange:setCornerHeight,getStyles},children:(0,jsx_runtime.jsx)(Box.a,{...others,ref:rootRef,__vars:{"--sa-corner-width":"xy"!==scrollbars?"0px":`${cornerWidth}px`,"--sa-corner-height":"xy"!==scrollbars?"0px":`${cornerHeight}px`}})})});function useDebouncedCallback(callback,options){const{delay,flushOnUnmount,leading}="number"==typeof options?{delay:options,flushOnUnmount:!1,leading:!1}:options,handleCallback=useCallbackRef(callback),debounceTimerRef=(0,react.useRef)(0),lastCallback=(0,react.useMemo)(()=>{const currentCallback=Object.assign((...args)=>{window.clearTimeout(debounceTimerRef.current);const isFirstCall=currentCallback._isFirstCall;function clearTimeoutAndLeadingRef(){window.clearTimeout(debounceTimerRef.current),debounceTimerRef.current=0,currentCallback._isFirstCall=!0}if(currentCallback._isFirstCall=!1,leading&&isFirstCall){handleCallback(...args);const resetLeadingState=()=>{clearTimeoutAndLeadingRef()},flush2=()=>{0!==debounceTimerRef.current&&(clearTimeoutAndLeadingRef(),handleCallback(...args))},cancel2=()=>{clearTimeoutAndLeadingRef()};return currentCallback.flush=flush2,currentCallback.cancel=cancel2,void(debounceTimerRef.current=window.setTimeout(resetLeadingState,delay))}if(leading&&!isFirstCall){const flush2=()=>{0!==debounceTimerRef.current&&(clearTimeoutAndLeadingRef(),handleCallback(...args))},cancel2=()=>{clearTimeoutAndLeadingRef()};currentCallback.flush=flush2,currentCallback.cancel=cancel2;const resetLeadingState=()=>{clearTimeoutAndLeadingRef()};return void(debounceTimerRef.current=window.setTimeout(resetLeadingState,delay))}const flush=()=>{0!==debounceTimerRef.current&&(clearTimeoutAndLeadingRef(),handleCallback(...args))};currentCallback.flush=flush,currentCallback.cancel=()=>{clearTimeoutAndLeadingRef()},debounceTimerRef.current=window.setTimeout(flush,delay)},{flush:()=>{},cancel:()=>{},_isFirstCall:!0});return currentCallback},[handleCallback,delay,leading]);return(0,react.useEffect)(()=>()=>{flushOnUnmount?lastCallback.flush():lastCallback.cancel()},[lastCallback,flushOnUnmount]),lastCallback}ScrollAreaRoot.displayName="@mantine/core/ScrollAreaRoot";var DirectionProvider=__webpack_require__("./node_modules/@mantine/core/esm/core/DirectionProvider/DirectionProvider.mjs");function getThumbRatio(viewportSize,contentSize){const ratio=viewportSize/contentSize;return Number.isNaN(ratio)?0:ratio}function getThumbSize(sizes){const ratio=getThumbRatio(sizes.viewport,sizes.content),scrollbarPadding=sizes.scrollbar.paddingStart+sizes.scrollbar.paddingEnd,thumbSize=(sizes.scrollbar.size-scrollbarPadding)*ratio;return Math.max(thumbSize,18)}function linearScale(input,output){return value=>{if(input[0]===input[1]||output[0]===output[1])return output[0];const ratio=(output[1]-output[0])/(input[1]-input[0]);return output[0]+ratio*(value-input[0])}}function getThumbOffsetFromScroll(scrollPos,sizes,dir="ltr"){const thumbSizePx=getThumbSize(sizes),scrollbarPadding=sizes.scrollbar.paddingStart+sizes.scrollbar.paddingEnd,scrollbar=sizes.scrollbar.size-scrollbarPadding,maxScrollPos=sizes.content-sizes.viewport,maxThumbPos=scrollbar-thumbSizePx,scrollWithoutMomentum=function clamp(value,[min,max]){return Math.min(max,Math.max(min,value))}(scrollPos,"ltr"===dir?[0,maxScrollPos]:[-1*maxScrollPos,0]);return linearScale([0,maxScrollPos],[0,maxThumbPos])(scrollWithoutMomentum)}function isScrollingWithinScrollbarBounds(scrollPos,maxScrollPos){return scrollPos>0&&scrollPos<maxScrollPos}var to_int=__webpack_require__("./node_modules/@mantine/core/esm/components/ScrollArea/utils/to-int.mjs");function composeEventHandlers(originalEventHandler,ourEventHandler,{checkForDefaultPrevented=!0}={}){return event=>{originalEventHandler?.(event),!1!==checkForDefaultPrevented&&event.defaultPrevented||ourEventHandler?.(event)}}const[ScrollbarProvider,useScrollbarContext]=(0,create_safe_context.F)("ScrollAreaScrollbar was not found in tree"),Scrollbar=(0,react.forwardRef)((props,forwardedRef)=>{const{sizes,hasThumb,onThumbChange,onThumbPointerUp,onThumbPointerDown,onThumbPositionChange,onDragScroll,onWheelScroll,onResize,...scrollbarProps}=props,context=useScrollAreaContext(),[scrollbar,setScrollbar]=(0,react.useState)(null),composeRefs=(0,use_merged_ref.pc)(forwardedRef,node=>setScrollbar(node)),rectRef=(0,react.useRef)(null),prevWebkitUserSelectRef=(0,react.useRef)(""),{viewport}=context,maxScrollPos=sizes.content-sizes.viewport,handleWheelScroll=useCallbackRef(onWheelScroll),handleThumbPositionChange=useCallbackRef(onThumbPositionChange),handleResize=useDebouncedCallback(onResize,10),handleDragScroll=event=>{if(rectRef.current){const x=event.clientX-rectRef.current.left,y=event.clientY-rectRef.current.top;onDragScroll({x,y})}};return(0,react.useEffect)(()=>{const handleWheel=event=>{const element=event.target,isScrollbarWheel=scrollbar?.contains(element);isScrollbarWheel&&handleWheelScroll(event,maxScrollPos)};return document.addEventListener("wheel",handleWheel,{passive:!1}),()=>document.removeEventListener("wheel",handleWheel,{passive:!1})},[viewport,scrollbar,maxScrollPos,handleWheelScroll]),(0,react.useEffect)(handleThumbPositionChange,[sizes,handleThumbPositionChange]),useResizeObserver(scrollbar,handleResize),useResizeObserver(context.content,handleResize),(0,jsx_runtime.jsx)(ScrollbarProvider,{value:{scrollbar,hasThumb,onThumbChange:useCallbackRef(onThumbChange),onThumbPointerUp:useCallbackRef(onThumbPointerUp),onThumbPositionChange:handleThumbPositionChange,onThumbPointerDown:useCallbackRef(onThumbPointerDown)},children:(0,jsx_runtime.jsx)("div",{...scrollbarProps,ref:composeRefs,"data-mantine-scrollbar":!0,style:{position:"absolute",...scrollbarProps.style},onPointerDown:composeEventHandlers(props.onPointerDown,event=>{event.preventDefault();if(0===event.button){event.target.setPointerCapture(event.pointerId),rectRef.current=scrollbar.getBoundingClientRect(),prevWebkitUserSelectRef.current=document.body.style.webkitUserSelect,document.body.style.webkitUserSelect="none",handleDragScroll(event)}}),onPointerMove:composeEventHandlers(props.onPointerMove,handleDragScroll),onPointerUp:composeEventHandlers(props.onPointerUp,event=>{const element=event.target;element.hasPointerCapture(event.pointerId)&&(event.preventDefault(),element.releasePointerCapture(event.pointerId))}),onLostPointerCapture:()=>{document.body.style.webkitUserSelect=prevWebkitUserSelectRef.current,rectRef.current=null}})})}),ScrollAreaScrollbarX=(0,react.forwardRef)((props,forwardedRef)=>{const{sizes,onSizesChange,style,...others}=props,ctx=useScrollAreaContext(),[computedStyle,setComputedStyle]=(0,react.useState)(),ref=(0,react.useRef)(null),composeRefs=(0,use_merged_ref.pc)(forwardedRef,ref,ctx.onScrollbarXChange);return(0,react.useEffect)(()=>{ref.current&&setComputedStyle(getComputedStyle(ref.current))},[ref]),(0,jsx_runtime.jsx)(Scrollbar,{"data-orientation":"horizontal",...others,ref:composeRefs,sizes,style:{...style,"--sa-thumb-width":`${getThumbSize(sizes)}px`},onThumbPointerDown:pointerPos=>props.onThumbPointerDown(pointerPos.x),onDragScroll:pointerPos=>props.onDragScroll(pointerPos.x),onWheelScroll:(event,maxScrollPos)=>{if(ctx.viewport){const scrollPos=ctx.viewport.scrollLeft+event.deltaX;props.onWheelScroll(scrollPos),isScrollingWithinScrollbarBounds(scrollPos,maxScrollPos)&&event.preventDefault()}},onResize:()=>{ref.current&&ctx.viewport&&computedStyle&&onSizesChange({content:ctx.viewport.scrollWidth,viewport:ctx.viewport.offsetWidth,scrollbar:{size:ref.current.clientWidth,paddingStart:(0,to_int.R)(computedStyle.paddingLeft),paddingEnd:(0,to_int.R)(computedStyle.paddingRight)}})}})});ScrollAreaScrollbarX.displayName="@mantine/core/ScrollAreaScrollbarX";const ScrollAreaScrollbarY=(0,react.forwardRef)((props,forwardedRef)=>{const{sizes,onSizesChange,style,...others}=props,context=useScrollAreaContext(),[computedStyle,setComputedStyle]=(0,react.useState)(),ref=(0,react.useRef)(null),composeRefs=(0,use_merged_ref.pc)(forwardedRef,ref,context.onScrollbarYChange);return(0,react.useEffect)(()=>{ref.current&&setComputedStyle(window.getComputedStyle(ref.current))},[]),(0,jsx_runtime.jsx)(Scrollbar,{...others,"data-orientation":"vertical",ref:composeRefs,sizes,style:{"--sa-thumb-height":`${getThumbSize(sizes)}px`,...style},onThumbPointerDown:pointerPos=>props.onThumbPointerDown(pointerPos.y),onDragScroll:pointerPos=>props.onDragScroll(pointerPos.y),onWheelScroll:(event,maxScrollPos)=>{if(context.viewport){const scrollPos=context.viewport.scrollTop+event.deltaY;props.onWheelScroll(scrollPos),isScrollingWithinScrollbarBounds(scrollPos,maxScrollPos)&&event.preventDefault()}},onResize:()=>{ref.current&&context.viewport&&computedStyle&&onSizesChange({content:context.viewport.scrollHeight,viewport:context.viewport.offsetHeight,scrollbar:{size:ref.current.clientHeight,paddingStart:(0,to_int.R)(computedStyle.paddingTop),paddingEnd:(0,to_int.R)(computedStyle.paddingBottom)}})}})});ScrollAreaScrollbarY.displayName="@mantine/core/ScrollAreaScrollbarY";const ScrollAreaScrollbarVisible=(0,react.forwardRef)((props,forwardedRef)=>{const{orientation="vertical",...scrollbarProps}=props,{dir}=(0,DirectionProvider.jH)(),context=useScrollAreaContext(),thumbRef=(0,react.useRef)(null),pointerOffsetRef=(0,react.useRef)(0),[sizes,setSizes]=(0,react.useState)({content:0,viewport:0,scrollbar:{size:0,paddingStart:0,paddingEnd:0}}),thumbRatio=getThumbRatio(sizes.viewport,sizes.content),commonProps={...scrollbarProps,sizes,onSizesChange:setSizes,hasThumb:Boolean(thumbRatio>0&&thumbRatio<1),onThumbChange:thumb=>{thumbRef.current=thumb},onThumbPointerUp:()=>{pointerOffsetRef.current=0},onThumbPointerDown:pointerPos=>{pointerOffsetRef.current=pointerPos}},getScrollPosition=(pointerPos,direction)=>function getScrollPositionFromPointer(pointerPos,pointerOffset,sizes,dir="ltr"){const thumbSizePx=getThumbSize(sizes),offset=pointerOffset||thumbSizePx/2,thumbOffsetFromEnd=thumbSizePx-offset,minPointerPos=sizes.scrollbar.paddingStart+offset,maxPointerPos=sizes.scrollbar.size-sizes.scrollbar.paddingEnd-thumbOffsetFromEnd,maxScrollPos=sizes.content-sizes.viewport;return linearScale([minPointerPos,maxPointerPos],"ltr"===dir?[0,maxScrollPos]:[-1*maxScrollPos,0])(pointerPos)}(pointerPos,pointerOffsetRef.current,sizes,direction);return"horizontal"===orientation?(0,jsx_runtime.jsx)(ScrollAreaScrollbarX,{...commonProps,ref:forwardedRef,onThumbPositionChange:()=>{if(context.viewport&&thumbRef.current){const offset=getThumbOffsetFromScroll(context.viewport.scrollLeft,sizes,dir);thumbRef.current.style.transform=`translate3d(${offset}px, 0, 0)`}},onWheelScroll:scrollPos=>{context.viewport&&(context.viewport.scrollLeft=scrollPos)},onDragScroll:pointerPos=>{context.viewport&&(context.viewport.scrollLeft=getScrollPosition(pointerPos,dir))}}):"vertical"===orientation?(0,jsx_runtime.jsx)(ScrollAreaScrollbarY,{...commonProps,ref:forwardedRef,onThumbPositionChange:()=>{if(context.viewport&&thumbRef.current){const offset=getThumbOffsetFromScroll(context.viewport.scrollTop,sizes);0===sizes.scrollbar.size?thumbRef.current.style.setProperty("--thumb-opacity","0"):thumbRef.current.style.setProperty("--thumb-opacity","1"),thumbRef.current.style.transform=`translate3d(0, ${offset}px, 0)`}},onWheelScroll:scrollPos=>{context.viewport&&(context.viewport.scrollTop=scrollPos)},onDragScroll:pointerPos=>{context.viewport&&(context.viewport.scrollTop=getScrollPosition(pointerPos))}}):null});ScrollAreaScrollbarVisible.displayName="@mantine/core/ScrollAreaScrollbarVisible";const ScrollAreaScrollbarAuto=(0,react.forwardRef)((props,ref)=>{const context=useScrollAreaContext(),{forceMount,...scrollbarProps}=props,[visible,setVisible]=(0,react.useState)(!1),isHorizontal="horizontal"===props.orientation,handleResize=useDebouncedCallback(()=>{if(context.viewport){const isOverflowX=context.viewport.offsetWidth<context.viewport.scrollWidth,isOverflowY=context.viewport.offsetHeight<context.viewport.scrollHeight;setVisible(isHorizontal?isOverflowX:isOverflowY)}},10);return useResizeObserver(context.viewport,handleResize),useResizeObserver(context.content,handleResize),forceMount||visible?(0,jsx_runtime.jsx)(ScrollAreaScrollbarVisible,{"data-state":visible?"visible":"hidden",...scrollbarProps,ref}):null});ScrollAreaScrollbarAuto.displayName="@mantine/core/ScrollAreaScrollbarAuto";const ScrollAreaScrollbarHover=(0,react.forwardRef)((props,ref)=>{const{forceMount,...scrollbarProps}=props,context=useScrollAreaContext(),[visible,setVisible]=(0,react.useState)(!1);return(0,react.useEffect)(()=>{const{scrollArea}=context;let hideTimer=0;if(scrollArea){const handlePointerEnter=()=>{window.clearTimeout(hideTimer),setVisible(!0)},handlePointerLeave=()=>{hideTimer=window.setTimeout(()=>setVisible(!1),context.scrollHideDelay)};return scrollArea.addEventListener("pointerenter",handlePointerEnter),scrollArea.addEventListener("pointerleave",handlePointerLeave),()=>{window.clearTimeout(hideTimer),scrollArea.removeEventListener("pointerenter",handlePointerEnter),scrollArea.removeEventListener("pointerleave",handlePointerLeave)}}},[context.scrollArea,context.scrollHideDelay]),forceMount||visible?(0,jsx_runtime.jsx)(ScrollAreaScrollbarAuto,{"data-state":visible?"visible":"hidden",...scrollbarProps,ref}):null});ScrollAreaScrollbarHover.displayName="@mantine/core/ScrollAreaScrollbarHover";const ScrollAreaScrollbarScroll=(0,react.forwardRef)((props,red)=>{const{forceMount,...scrollbarProps}=props,context=useScrollAreaContext(),isHorizontal="horizontal"===props.orientation,[state,setState]=(0,react.useState)("hidden"),debounceScrollEnd=useDebouncedCallback(()=>setState("idle"),100);return(0,react.useEffect)(()=>{if("idle"===state){const hideTimer=window.setTimeout(()=>setState("hidden"),context.scrollHideDelay);return()=>window.clearTimeout(hideTimer)}},[state,context.scrollHideDelay]),(0,react.useEffect)(()=>{const{viewport}=context,scrollDirection=isHorizontal?"scrollLeft":"scrollTop";if(viewport){let prevScrollPos=viewport[scrollDirection];const handleScroll=()=>{const scrollPos=viewport[scrollDirection];prevScrollPos!==scrollPos&&(setState("scrolling"),debounceScrollEnd()),prevScrollPos=scrollPos};return viewport.addEventListener("scroll",handleScroll),()=>viewport.removeEventListener("scroll",handleScroll)}},[context.viewport,isHorizontal,debounceScrollEnd]),forceMount||"hidden"!==state?(0,jsx_runtime.jsx)(ScrollAreaScrollbarVisible,{"data-state":"hidden"===state?"hidden":"visible",...scrollbarProps,ref:red,onPointerEnter:composeEventHandlers(props.onPointerEnter,()=>setState("interacting")),onPointerLeave:composeEventHandlers(props.onPointerLeave,()=>setState("idle"))}):null}),ScrollAreaScrollbar=(0,react.forwardRef)((props,forwardedRef)=>{const{forceMount,...scrollbarProps}=props,context=useScrollAreaContext(),{onScrollbarXEnabledChange,onScrollbarYEnabledChange}=context,isHorizontal="horizontal"===props.orientation;return(0,react.useEffect)(()=>(isHorizontal?onScrollbarXEnabledChange(!0):onScrollbarYEnabledChange(!0),()=>{isHorizontal?onScrollbarXEnabledChange(!1):onScrollbarYEnabledChange(!1)}),[isHorizontal,onScrollbarXEnabledChange,onScrollbarYEnabledChange]),"hover"===context.type?(0,jsx_runtime.jsx)(ScrollAreaScrollbarHover,{...scrollbarProps,ref:forwardedRef,forceMount}):"scroll"===context.type?(0,jsx_runtime.jsx)(ScrollAreaScrollbarScroll,{...scrollbarProps,ref:forwardedRef,forceMount}):"auto"===context.type?(0,jsx_runtime.jsx)(ScrollAreaScrollbarAuto,{...scrollbarProps,ref:forwardedRef,forceMount}):"always"===context.type?(0,jsx_runtime.jsx)(ScrollAreaScrollbarVisible,{...scrollbarProps,ref:forwardedRef}):null});ScrollAreaScrollbar.displayName="@mantine/core/ScrollAreaScrollbar";const Thumb=(0,react.forwardRef)((props,forwardedRef)=>{const{style,...others}=props,scrollAreaContext=useScrollAreaContext(),scrollbarContext=useScrollbarContext(),{onThumbPositionChange}=scrollbarContext,composedRef=(0,use_merged_ref.pc)(forwardedRef,node=>scrollbarContext.onThumbChange(node)),removeUnlinkedScrollListenerRef=(0,react.useRef)(void 0),debounceScrollEnd=useDebouncedCallback(()=>{removeUnlinkedScrollListenerRef.current&&(removeUnlinkedScrollListenerRef.current(),removeUnlinkedScrollListenerRef.current=void 0)},100);return(0,react.useEffect)(()=>{const{viewport}=scrollAreaContext;if(viewport){const handleScroll=()=>{if(debounceScrollEnd(),!removeUnlinkedScrollListenerRef.current){const listener=function addUnlinkedScrollListener(node,handler=()=>{}){let prevPosition={left:node.scrollLeft,top:node.scrollTop},rAF=0;return function loop(){const position={left:node.scrollLeft,top:node.scrollTop},isHorizontalScroll=prevPosition.left!==position.left,isVerticalScroll=prevPosition.top!==position.top;(isHorizontalScroll||isVerticalScroll)&&handler(),prevPosition=position,rAF=window.requestAnimationFrame(loop)}(),()=>window.cancelAnimationFrame(rAF)}(viewport,onThumbPositionChange);removeUnlinkedScrollListenerRef.current=listener,onThumbPositionChange()}};return onThumbPositionChange(),viewport.addEventListener("scroll",handleScroll),()=>viewport.removeEventListener("scroll",handleScroll)}},[scrollAreaContext.viewport,debounceScrollEnd,onThumbPositionChange]),(0,jsx_runtime.jsx)("div",{"data-state":scrollbarContext.hasThumb?"visible":"hidden",...others,ref:composedRef,style:{width:"var(--sa-thumb-width)",height:"var(--sa-thumb-height)",...style},onPointerDownCapture:composeEventHandlers(props.onPointerDownCapture,event=>{const thumbRect=event.target.getBoundingClientRect(),x=event.clientX-thumbRect.left,y=event.clientY-thumbRect.top;scrollbarContext.onThumbPointerDown({x,y})}),onPointerUp:composeEventHandlers(props.onPointerUp,scrollbarContext.onThumbPointerUp)})});Thumb.displayName="@mantine/core/ScrollAreaThumb";const ScrollAreaThumb=(0,react.forwardRef)((props,forwardedRef)=>{const{forceMount,...thumbProps}=props,scrollbarContext=useScrollbarContext();return forceMount||scrollbarContext.hasThumb?(0,jsx_runtime.jsx)(Thumb,{ref:forwardedRef,...thumbProps}):null});ScrollAreaThumb.displayName="@mantine/core/ScrollAreaThumb";const ScrollAreaViewport=(0,react.forwardRef)(({children,style,...others},ref)=>{const ctx=useScrollAreaContext(),rootRef=(0,use_merged_ref.pc)(ref,ctx.onViewportChange);return(0,jsx_runtime.jsx)(Box.a,{...others,ref:rootRef,style:{overflowX:ctx.scrollbarXEnabled?"scroll":"hidden",overflowY:ctx.scrollbarYEnabled?"scroll":"hidden",...style},children:(0,jsx_runtime.jsx)("div",{...ctx.getStyles("content"),ref:ctx.onContentChange,children})})});ScrollAreaViewport.displayName="@mantine/core/ScrollAreaViewport";var classes={root:"m_d57069b5",content:"m_b1336c6",viewport:"m_c0783ff9",viewportInner:"m_f8f631dd",scrollbar:"m_c44ba933",thumb:"m_d8b5e363",corner:"m_21657268"};const ScrollArea_defaultProps={scrollHideDelay:1e3,type:"hover",scrollbars:"xy"},varsResolver=(0,create_vars_resolver.V)((_,{scrollbarSize,overscrollBehavior})=>({root:{"--scrollarea-scrollbar-size":(0,rem.D)(scrollbarSize),"--scrollarea-over-scroll-behavior":overscrollBehavior}})),ScrollArea=(0,factory.P9)((_props,ref)=>{const props=(0,use_props.Y)("ScrollArea",ScrollArea_defaultProps,_props),{classNames,className,style,styles,unstyled,scrollbarSize,vars,type,scrollHideDelay,viewportProps,viewportRef,onScrollPositionChange,children,offsetScrollbars,scrollbars,onBottomReached,onTopReached,overscrollBehavior,attributes,...others}=props,[scrollbarHovered,setScrollbarHovered]=(0,react.useState)(!1),[verticalThumbVisible,setVerticalThumbVisible]=(0,react.useState)(!1),[horizontalThumbVisible,setHorizontalThumbVisible]=(0,react.useState)(!1),getStyles=(0,use_styles.I)({name:"ScrollArea",props,classes,className,style,classNames,styles,unstyled,attributes,vars,varsResolver}),localViewportRef=(0,react.useRef)(null),combinedViewportRef=(0,floating_ui_react.SV)([viewportRef,localViewportRef]);return(0,react.useEffect)(()=>{if(!localViewportRef.current)return;if("present"!==offsetScrollbars)return;const element=localViewportRef.current,observer=new ResizeObserver(()=>{const{scrollHeight,clientHeight,scrollWidth,clientWidth}=element;setVerticalThumbVisible(scrollHeight>clientHeight),setHorizontalThumbVisible(scrollWidth>clientWidth)});return observer.observe(element),()=>observer.disconnect()},[localViewportRef,offsetScrollbars]),(0,jsx_runtime.jsxs)(ScrollAreaRoot,{getStyles,type:"never"===type?"always":type,scrollHideDelay,ref,scrollbars,...getStyles("root"),...others,children:[(0,jsx_runtime.jsx)(ScrollAreaViewport,{...viewportProps,...getStyles("viewport",{style:viewportProps?.style}),ref:combinedViewportRef,"data-offset-scrollbars":!0===offsetScrollbars?"xy":offsetScrollbars||void 0,"data-scrollbars":scrollbars||void 0,"data-horizontal-hidden":"present"!==offsetScrollbars||horizontalThumbVisible?void 0:"true","data-vertical-hidden":"present"!==offsetScrollbars||verticalThumbVisible?void 0:"true",onScroll:e=>{viewportProps?.onScroll?.(e),onScrollPositionChange?.({x:e.currentTarget.scrollLeft,y:e.currentTarget.scrollTop});const{scrollTop,scrollHeight,clientHeight}=e.currentTarget;scrollTop-(scrollHeight-clientHeight)>=-.6&&onBottomReached?.(),0===scrollTop&&onTopReached?.()},children}),("xy"===scrollbars||"x"===scrollbars)&&(0,jsx_runtime.jsx)(ScrollAreaScrollbar,{...getStyles("scrollbar"),orientation:"horizontal","data-hidden":"never"===type||"present"===offsetScrollbars&&!horizontalThumbVisible||void 0,forceMount:!0,onMouseEnter:()=>setScrollbarHovered(!0),onMouseLeave:()=>setScrollbarHovered(!1),children:(0,jsx_runtime.jsx)(ScrollAreaThumb,{...getStyles("thumb")})}),("xy"===scrollbars||"y"===scrollbars)&&(0,jsx_runtime.jsx)(ScrollAreaScrollbar,{...getStyles("scrollbar"),orientation:"vertical","data-hidden":"never"===type||"present"===offsetScrollbars&&!verticalThumbVisible||void 0,forceMount:!0,onMouseEnter:()=>setScrollbarHovered(!0),onMouseLeave:()=>setScrollbarHovered(!1),children:(0,jsx_runtime.jsx)(ScrollAreaThumb,{...getStyles("thumb")})}),(0,jsx_runtime.jsx)(ScrollAreaCorner,{...getStyles("corner"),"data-hovered":scrollbarHovered||void 0,"data-hidden":"never"===type||void 0})]})});ScrollArea.displayName="@mantine/core/ScrollArea";const ScrollAreaAutosize=(0,factory.P9)((props,ref)=>{const{children,classNames,styles,scrollbarSize,scrollHideDelay,type,dir,offsetScrollbars,viewportRef,onScrollPositionChange,unstyled,variant,viewportProps,scrollbars,style,vars,onBottomReached,onTopReached,onOverflowChange,...others}=(0,use_props.Y)("ScrollAreaAutosize",ScrollArea_defaultProps,props),viewportObserverRef=(0,react.useRef)(null),combinedViewportRef=(0,floating_ui_react.SV)([viewportRef,viewportObserverRef]),[overflowing,setOverflowing]=(0,react.useState)(!1),didMount=(0,react.useRef)(!1);return(0,react.useEffect)(()=>{if(!onOverflowChange)return;const el=viewportObserverRef.current;if(!el)return;const update=()=>{const isOverflowing=el.scrollHeight>el.clientHeight;isOverflowing!==overflowing&&(didMount.current?onOverflowChange?.(isOverflowing):(didMount.current=!0,isOverflowing&&onOverflowChange?.(!0)),setOverflowing(isOverflowing))};update();const ro=new ResizeObserver(update);return ro.observe(el),()=>ro.disconnect()},[onOverflowChange,overflowing]),(0,jsx_runtime.jsx)(Box.a,{...others,ref,style:[{display:"flex",overflow:"hidden"},style],children:(0,jsx_runtime.jsx)(Box.a,{style:{display:"flex",flexDirection:"column",flex:1,overflow:"hidden",..."y"===scrollbars&&{minWidth:0},..."x"===scrollbars&&{minHeight:0},..."xy"===scrollbars&&{minWidth:0,minHeight:0},...!1===scrollbars&&{minWidth:0,minHeight:0}},children:(0,jsx_runtime.jsx)(ScrollArea,{classNames,styles,scrollHideDelay,scrollbarSize,type,dir,offsetScrollbars,viewportRef:combinedViewportRef,onScrollPositionChange,unstyled,variant,viewportProps,vars,scrollbars,onBottomReached,onTopReached,"data-autosize":"true",children})})})});ScrollArea.classes=classes,ScrollAreaAutosize.displayName="@mantine/core/ScrollAreaAutosize",ScrollAreaAutosize.classes=classes,ScrollArea.Autosize=ScrollAreaAutosize},"./node_modules/@mantine/core/esm/components/ScrollArea/utils/to-int.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function toInt(value){return value?parseInt(value,10):0}__webpack_require__.d(__webpack_exports__,{R:()=>toInt})},"./node_modules/@mantine/core/esm/core/utils/create-safe-context/create-safe-context.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>createSafeContext});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");function createSafeContext(errorMessage){const Context=(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);return[({children,value})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Context.Provider,{value,children}),()=>{const ctx=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Context);if(null===ctx)throw new Error(errorMessage);return ctx}]}}}]);